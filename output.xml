<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.2 (Python 3.9.0 on win32)" generated="20201218 09:18:44.175" rpa="false">
<suite id="s1" name="Test Wp" source="C:\Users\oliver.uhlar\Desktop\Projects\wamp_plotly\test_wp.robot">
<kw name="Start setup" type="setup">
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>wamp.bat</arg>
</arguments>
<msg timestamp="20201218 09:18:44.207" level="INFO">Starting process:
wamp.bat</msg>
<status status="PASS" starttime="20201218 09:18:44.207" endtime="20201218 09:18:44.209"></status>
</kw>
<status status="PASS" starttime="20201218 09:18:44.207" endtime="20201218 09:18:44.209"></status>
</kw>
<test id="s1-t1" name="Test wamp is booted">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40s</arg>
<arg>5s</arg>
<arg>Is wamp booted</arg>
</arguments>
<kw name="Is wamp booted">
<kw name="Connect To Database" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<arguments>
<arg>dbConfigFile=db.cfg</arg>
</arguments>
<msg timestamp="20201218 09:18:44.228" level="INFO">Connecting using : pymysql.connect(db=myfirstdb, user=oliveruhlar, passwd=2BisxP1k3NdBDZ1E, host=localhost, port=3308, charset=None) </msg>
<status status="PASS" starttime="20201218 09:18:44.211" endtime="20201218 09:18:44.233"></status>
</kw>
<status status="PASS" starttime="20201218 09:18:44.210" endtime="20201218 09:18:44.234"></status>
</kw>
<status status="PASS" starttime="20201218 09:18:44.210" endtime="20201218 09:18:44.234"></status>
</kw>
<status status="PASS" starttime="20201218 09:18:44.209" endtime="20201218 09:18:44.234" critical="yes"></status>
</test>
<test id="s1-t2" name="Create table">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>CREATE TABLE temp_bb (`Months` varchar(20), `Max temperature` float, `Min temperature` float, `Avg temperature` float)</arg>
</arguments>
<msg timestamp="20201218 09:18:44.235" level="INFO">Executing : Query  |  CREATE TABLE temp_bb (`Months` varchar(20), `Max temperature` float, `Min temperature` float, `Avg temperature` float) </msg>
<status status="PASS" starttime="20201218 09:18:44.235" endtime="20201218 09:18:44.256"></status>
</kw>
<kw name="Table Must Exist" library="DatabaseLibrary">
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<arguments>
<arg>temp_bb</arg>
</arguments>
<msg timestamp="20201218 09:18:44.266" level="INFO">Executing : Table Must Exist  |  temp_bb </msg>
<msg timestamp="20201218 09:18:44.266" level="INFO">Executing : Row Count  |  SELECT * FROM information_schema.tables WHERE table_name='temp_bb' </msg>
<status status="PASS" starttime="20201218 09:18:44.265" endtime="20201218 09:18:44.271"></status>
</kw>
<kw name="Row Count Is Equal To X" library="DatabaseLibrary">
<doc>Check if the number of rows returned from `selectStatement` is equal to the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<arguments>
<arg>SELECT * FROM temp_bb</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20201218 09:18:44.271" level="INFO">Executing : Row Count Is Equal To X  |  SELECT * FROM temp_bb  |  0 </msg>
<msg timestamp="20201218 09:18:44.271" level="INFO">Executing : Row Count  |  SELECT * FROM temp_bb </msg>
<status status="PASS" starttime="20201218 09:18:44.271" endtime="20201218 09:18:44.272"></status>
</kw>
<status status="PASS" starttime="20201218 09:18:44.235" endtime="20201218 09:18:44.273" critical="yes"></status>
</test>
<test id="s1-t3" name="Insert data from yaml">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>C:\\Users\\oliver.uhlar\\Desktop\\Projects\\wamp_plotly\\venv\\Scripts\\python.exe</arg>
<arg>load_data.py</arg>
<arg>runserver</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20201218 09:18:44.278" level="INFO">Starting process:
C:\Users\oliver.uhlar\Desktop\Projects\wamp_plotly\venv\Scripts\python.exe load_data.py runserver</msg>
<msg timestamp="20201218 09:18:44.284" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201218 09:18:44.388" level="INFO">Process completed.</msg>
<msg timestamp="20201218 09:18:44.388" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20201218 09:18:44.276" endtime="20201218 09:18:44.388"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${result.stderr}</arg>
<arg>msg=${result.stderr}</arg>
</arguments>
<msg timestamp="20201218 09:18:44.389" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20201218 09:18:44.388" endtime="20201218 09:18:44.389"></status>
</kw>
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>${result.stdout}</arg>
</arguments>
<msg timestamp="20201218 09:18:44.390" level="INFO">Executing : Query  |  INSERT INTO  `temp_bb` (`Months`, `Max temperature`, `Min temperature`, `Avg temperature`) VALUES('January', 1.0, -6.7, -2.9), ('February', 4.4, -5.2, -0.8), ('March', 9.5, -1.5, 3.5), ('April', 15.2, 2.4, 8.7), ('May', 20.9, 7.2, 14.0), ('Jun', 23.6, 10.1, 16.9), ('July', 25.5, 11.5, 18.5), ('August', 25.8, 11.1, 18.0), ('September', 20.6, NULL, 13.5), ('October', 14.6, 3.4, 8.2), ('November', 6.5, -0.8, 2.7), ('December', 1.9, -4.6, -1.4) </msg>
<status status="PASS" starttime="20201218 09:18:44.389" endtime="20201218 09:18:44.391"></status>
</kw>
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT * FROM temp_bb</arg>
</arguments>
<assign>
<var>${rowCount}</var>
</assign>
<msg timestamp="20201218 09:18:44.392" level="INFO">Executing : Row Count  |  SELECT * FROM temp_bb </msg>
<msg timestamp="20201218 09:18:44.393" level="INFO">${rowCount} = 12</msg>
<status status="PASS" starttime="20201218 09:18:44.392" endtime="20201218 09:18:44.393"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rowCount}</arg>
<arg>12</arg>
</arguments>
<msg timestamp="20201218 09:18:44.393" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20201218 09:18:44.393" endtime="20201218 09:18:44.393"></status>
</kw>
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT * FROM temp_bb</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20201218 09:18:44.394" level="INFO">Executing : Query  |  SELECT * FROM temp_bb </msg>
<msg timestamp="20201218 09:18:44.395" level="INFO">${output} = (('January', 1.0, -6.7, -2.9), ('February', 4.4, -5.2, -0.8), ('March', 9.5, -1.5, 3.5), ('April', 15.2, 2.4, 8.7), ('May', 20.9, 7.2, 14.0), ('Jun', 23.6, 10.1, 16.9), ('July', 25.5, 11.5, 18.5), ('A...</msg>
<status status="PASS" starttime="20201218 09:18:44.394" endtime="20201218 09:18:44.395"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201218 09:18:44.395" level="INFO">(('January', 1.0, -6.7, -2.9), ('February', 4.4, -5.2, -0.8), ('March', 9.5, -1.5, 3.5), ('April', 15.2, 2.4, 8.7), ('May', 20.9, 7.2, 14.0), ('Jun', 23.6, 10.1, 16.9), ('July', 25.5, 11.5, 18.5), ('August', 25.8, 11.1, 18.0), ('September', 20.6, None, 13.5), ('October', 14.6, 3.4, 8.2), ('November', 6.5, -0.8, 2.7), ('December', 1.9, -4.6, -1.4))</msg>
<status status="PASS" starttime="20201218 09:18:44.395" endtime="20201218 09:18:44.396"></status>
</kw>
<status status="PASS" starttime="20201218 09:18:44.274" endtime="20201218 09:18:44.396" critical="yes"></status>
</test>
<test id="s1-t4" name="Graph temperature BB">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>C:\\Users\\oliver.uhlar\\Desktop\\Projects\\wamp_plotly\\venv\\Scripts\\python.exe</arg>
<arg>wamp_plotly.py</arg>
<arg>runserver</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20201218 09:18:44.398" level="INFO">Starting process:
C:\Users\oliver.uhlar\Desktop\Projects\wamp_plotly\venv\Scripts\python.exe wamp_plotly.py runserver</msg>
<msg timestamp="20201218 09:18:44.400" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201218 09:18:44.966" level="INFO">Process completed.</msg>
<msg timestamp="20201218 09:18:44.966" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20201218 09:18:44.398" endtime="20201218 09:18:44.966"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${result.stderr}</arg>
<arg>msg=${result.stderr}</arg>
</arguments>
<msg timestamp="20201218 09:18:44.967" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20201218 09:18:44.966" endtime="20201218 09:18:44.967"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result.stdout}</arg>
</arguments>
<msg timestamp="20201218 09:18:44.968" level="INFO">+-----------+--------+--------+--------+
|   Month   | Max C░ | Min C░ | Avg C░ |
+-----------+--------+--------+--------+
|  January  |  1.0   |  -6.7  |  -2.9  |
|  February |  4.4   |  -5.2  |  -0.8  |
|   March   |  9.5   |  -1.5  |  3.5   |
|   April   |  15.2  |  2.4   |  8.7   |
|    May    |  20.9  |  7.2   |  14.0  |
|    Jun    |  23.6  |  10.1  |  16.9  |
|    July   |  25.5  |  11.5  |  18.5  |
|   August  |  25.8  |  11.1  |  18.0  |
| September |  20.6  |  None  |  13.5  |
|  October  |  14.6  |  3.4   |  8.2   |
|  November |  6.5   |  -0.8  |  2.7   |
|  December |  1.9   |  -4.6  |  -1.4  |
+-----------+--------+--------+--------+</msg>
<status status="PASS" starttime="20201218 09:18:44.967" endtime="20201218 09:18:44.968"></status>
</kw>
<status status="PASS" starttime="20201218 09:18:44.397" endtime="20201218 09:18:44.969" critical="yes"></status>
</test>
<test id="s1-t5" name="Drop table">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>DROP TABLE temp_bb</arg>
</arguments>
<msg timestamp="20201218 09:18:44.970" level="INFO">Executing : Query  |  DROP TABLE temp_bb </msg>
<status status="PASS" starttime="20201218 09:18:44.970" endtime="20201218 09:18:44.980"></status>
</kw>
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>Table 'temp_bb' does not exist in the db</arg>
<arg>Table Must Exist</arg>
<arg>temp_bb</arg>
</arguments>
<kw name="Table Must Exist" library="DatabaseLibrary">
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<arguments>
<arg>temp_bb</arg>
</arguments>
<msg timestamp="20201218 09:18:44.981" level="INFO">Executing : Table Must Exist  |  temp_bb </msg>
<msg timestamp="20201218 09:18:44.981" level="INFO">Executing : Row Count  |  SELECT * FROM information_schema.tables WHERE table_name='temp_bb' </msg>
<msg timestamp="20201218 09:18:44.983" level="FAIL">Table 'temp_bb' does not exist in the db</msg>
<status status="FAIL" starttime="20201218 09:18:44.980" endtime="20201218 09:18:44.983"></status>
</kw>
<status status="PASS" starttime="20201218 09:18:44.980" endtime="20201218 09:18:44.984"></status>
</kw>
<status status="PASS" starttime="20201218 09:18:44.969" endtime="20201218 09:18:44.984" critical="yes"></status>
</test>
<status status="PASS" starttime="20201218 09:18:44.176" endtime="20201218 09:18:44.985"></status>
</suite>
<statistics>
<total>
<stat pass="5" fail="0">Critical Tests</stat>
<stat pass="5" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="5" fail="0" id="s1" name="Test Wp">Test Wp</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
